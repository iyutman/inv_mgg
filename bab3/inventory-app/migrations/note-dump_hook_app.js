{
  [EventEmitter: app]
  _events: [Object: null prototype] {
      mount: [Function: onmount],
      publish: [Function],
      connection: [Function],
      login: [Function]
    },
    _eventsCount: 4,
    _maxListeners: undefined,
    setMaxListeners: [Function: setMaxListeners],
    getMaxListeners: [Function: getMaxListeners],
    emit: [Function: emit],
    addListener: [Function: addListener],
    on: [Function: addListener],
    prependListener: [Function: prependListener],
    once: [Function: once],
    prependOnceListener: [Function: prependOnceListener],
    removeListener: [Function: removeListener],
    off: [Function: removeListener],
    removeAllListeners: [Function: removeAllListeners],
    listeners: [Function: listeners],
    rawListeners: [Function: rawListeners],
    listenerCount: [Function: listenerCount],
    eventNames: [Function: eventNames],
    init: [Function: init],
    defaultConfiguration: [Function: defaultConfiguration],
    lazyrouter: [Function: lazyrouter],
    handle: [Function: handle],
    use: [Function: newMethod],
    route: [Function: route],
    engine: [Function: engine],
    param: [Function: param],
    set: [Function: set],
    path: [Function: path],
    enabled: [Function: enabled],
    disabled: [Function: disabled],
    enable: [Function: enable],
    disable: [Function: disable],
    acl: [Function],
    bind: [Function],
    checkout: [Function],
    connect: [Function],
    copy: [Function],
    delete: [Function],
    get: [Function],
    head: [Function],
    link: [Function],
    lock: [Function],
    'm-search': [Function],
    merge: [Function],
    mkactivity: [Function],
    mkcalendar: [Function],
    mkcol: [Function],
    move: [Function],
    notify: [Function],
    options: [Function],
    patch: [Function],
    post: [Function],
    propfind: [Function],
    proppatch: [Function],
    purge: [Function],
    put: [Function],
    rebind: [Function],
    report: [Function],
    search: [Function],
    source: [Function],
    subscribe: [Function],
    trace: [Function],
    unbind: [Function],
    unlink: [Function],
    unlock: [Function],
    unsubscribe: [Function],
    all: [Function: all],
    del: [Function],
    render: [Function: render],
    listen: [Function: newMethod],
    request: IncomingMessage { app: [Circular] },
    response: ServerResponse { app: [Circular] },
    cache: {},
    engines: {},
    settings: {
      'x-powered-by': true,
      etag: 'weak',
      'etag fn': [Function: generateETag],
      env: 'development',
      'query parser': 'extended',
      'query parser fn': [Function: parseExtendedQueryString],
      'subdomain offset': 2,
      'trust proxy': false,
      'trust proxy fn': [Function: trustNone],
      view: [Function: View],
      views: 'E:\\Mgg Software\\testfather\\inventory-app\\views',
      'jsonp callback name': 'callback',
      host: 'localhost',
      port: 4041,
      public: 'E:\\Mgg Software\\testfather\\inventory-app\\public',
      paginate: { default: 10, max: 50 },
      authentication: {
        path: '/authentication',
        header: 'Authorization',
        entity: 'user',
        service: 'users',
        passReqToCallback: true,
        session: false,
        cookie: [Object],
        jwt: [Object],
        secret: '26566a87a51d5574f783fa0cbe77bde6c1f0969efc06ac0d5ee61bbf2ed7d78619cb0f1239edbb2bffbd27c82c66931f86b02b67d2055631d1f6901689ce2e0b1748ef4d3959f6c27178c6249f1b9fa34116a9776d8f7d823e49637428d6fb40bfda8d25f260d5b307281f93c6f269ed87b0bb2e76455efddb88e3a737e2082bb8b05f49c103ec6d21ea2af11e47ac90fbdd95253e5b2c823a4c0be73951d8c3067db1028c40ccae9b8cd6cd5fab708e3c610a5adb39de85022fd73f84a1a7fea9c4fcf9d7cb1c8485cd04bf9363f211278a6f789bcce523d609f086d1273e11228d934b592e50e599dc3c5cf53291fe37f6c38da1e37e6356bee70550300aef',
        strategies: [Array],
        local: [Object]
      },
      mongodb: 'mongodb://localhost:27017/inventoryApp',
      mongooseClient: Mongoose {
        connections: [Array],
        models: [Object],
        modelSchemas: [Object],
        options: [Object],
        _pluralize: [Function: pluralize],
        Schema: [Function],
        model: [Function],
        plugins: [Array]
      },
      auth: {
        path: '/authentication',
        header: 'Authorization',
        entity: 'user',
        service: 'users',
        passReqToCallback: true,
        session: false,
        cookie: [Object],
        jwt: [Object],
        secret: '26566a87a51d5574f783fa0cbe77bde6c1f0969efc06ac0d5ee61bbf2ed7d78619cb0f1239edbb2bffbd27c82c66931f86b02b67d2055631d1f6901689ce2e0b1748ef4d3959f6c27178c6249f1b9fa34116a9776d8f7d823e49637428d6fb40bfda8d25f260d5b307281f93c6f269ed87b0bb2e76455efddb88e3a737e2082bb8b05f49c103ec6d21ea2af11e47ac90fbdd95253e5b2c823a4c0be73951d8c3067db1028c40ccae9b8cd6cd5fab708e3c610a5adb39de85022fd73f84a1a7fea9c4fcf9d7cb1c8485cd04bf9363f211278a6f789bcce523d609f086d1273e11228d934b592e50e599dc3c5cf53291fe37f6c38da1e37e6356bee70550300aef',
        strategies: [Array],
        local: [Object]
      }
    },
    locals: [Object: null prototype] {
      settings: {
        'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: generateETag],
        env: 'development',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: 'E:\\Mgg Software\\testfather\\inventory-app\\views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        port: 4041,
        public: 'E:\\Mgg Software\\testfather\\inventory-app\\public',
        paginate: [Object],
        authentication: [Object],
        mongodb: 'mongodb://localhost:27017/inventoryApp',
        mongooseClient: [Mongoose],
        auth: [Object]
      }
    },
    mountpath: '/',
    configure: [Function: configure],
    service: [Function: service],
    setup: [Function],
    version: '3.3.1',
    methods: ['find', 'get', 'create', 'update', 'patch', 'remove'],
    mixins: [
      [Function: hookMixin],
      [Function: eventMixin],
      [Function],
      [Function],
      [Function]
    ],
    services: {
      authentication: {
        app: [Circular],
        passport: [Authenticator],
        create: [Function: newMethod],
        remove: [Function: newMethod],
        methods: [Object],
        hooks: [Function: hooks],
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        prependListener: [Function: prependListener],
        once: [Function: once],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        off: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        rawListeners: [Function: rawListeners],
        listenerCount: [Function: listenerCount],
        eventNames: [Function: eventNames],
        publish: [Function: publish],
        [Symbol(@feathersjs / transport - commons / publishers)]: [Object]
      },
      users: {
        options: [Object],
        discriminatorKey: '__t',
        discriminators: {},
        lean: true,
        overwrite: true,
        useEstimatedDocumentCount: false,
        find: [Function: newMethod],
        get: [Function: newMethod],
        create: [Function: newMethod],
        update: [Function: newMethod],
        patch: [Function: newMethod],
        remove: [Function: newMethod],
        methods: [Object],
        hooks: [Function: hooks],
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        prependListener: [Function: prependListener],
        once: [Function: once],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        off: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        rawListeners: [Function: rawListeners],
        listenerCount: [Function: listenerCount],
        eventNames: [Function: eventNames],
        publish: [Function: publish],
        _super: undefined,
        [Symbol(@feathersjs / transport - commons / publishers)]: {}
      },
      hello: {
        options: [Object],
        discriminatorKey: '__t',
        discriminators: {},
        lean: true,
        overwrite: true,
        useEstimatedDocumentCount: false,
        find: [Function: newMethod],
        get: [Function: newMethod],
        create: [Function: newMethod],
        update: [Function: newMethod],
        patch: [Function: newMethod],
        remove: [Function: newMethod],
        methods: [Object],
        hooks: [Function: hooks],
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        prependListener: [Function: prependListener],
        once: [Function: once],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        off: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        rawListeners: [Function: rawListeners],
        listenerCount: [Function: listenerCount],
        eventNames: [Function: eventNames],
        publish: [Function: publish],
        [Symbol(@feathersjs / transport - commons / publishers)]: {}
      },
      barang: {
        options: [Object],
        discriminatorKey: '__t',
        discriminators: {},
        lean: true,
        overwrite: true,
        useEstimatedDocumentCount: false,
        find: [Function: newMethod],
        get: [Function: newMethod],
        create: [Function: newMethod],
        update: [Function: newMethod],
        patch: [Function: newMethod],
        remove: [Function: newMethod],
        methods: [Object],
        hooks: [Function: hooks],
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        prependListener: [Function: prependListener],
        once: [Function: once],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        off: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        rawListeners: [Function: rawListeners],
        listenerCount: [Function: listenerCount],
        eventNames: [Function: eventNames],
        publish: [Function: publish],
        [Symbol(@feathersjs / transport - commons / publishers)]: {}
      },
      customer: {
        options: [Object],
        discriminatorKey: '__t',
        discriminators: {},
        lean: true,
        overwrite: true,
        useEstimatedDocumentCount: false,
        find: [Function: newMethod],
        get: [Function: newMethod],
        create: [Function: newMethod],
        update: [Function: newMethod],
        patch: [Function: newMethod],
        remove: [Function: newMethod],
        methods: [Object],
        hooks: [Function: hooks],
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        prependListener: [Function: prependListener],
        once: [Function: once],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        off: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        rawListeners: [Function: rawListeners],
        listenerCount: [Function: listenerCount],
        eventNames: [Function: eventNames],
        publish: [Function: publish],
        [Symbol(@feathersjs / transport - commons / publishers)]: {}
      },
      'transaksi-jual': {
        options: [Object],
        discriminatorKey: '__t',
        discriminators: {},
        lean: true,
        overwrite: true,
        useEstimatedDocumentCount: false,
        find: [Function: newMethod],
        get: [Function: newMethod],
        create: [Function: newMethod],
        update: [Function: newMethod],
        patch: [Function: newMethod],
        remove: [Function: newMethod],
        methods: [Object],
        hooks: [Function: hooks],
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        prependListener: [Function: prependListener],
        once: [Function: once],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        off: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        rawListeners: [Function: rawListeners],
        listenerCount: [Function: listenerCount],
        eventNames: [Function: eventNames],
        publish: [Function: publish],
        [Symbol(@feathersjs / transport - commons / publishers)]: {}
      },
      'transaksi-beli': {
        options: [Object],
        discriminatorKey: '__t',
        discriminators: {},
        lean: true,
        overwrite: true,
        useEstimatedDocumentCount: false,
        find: [Function: newMethod],
        get: [Function: newMethod],
        create: [Function: newMethod],
        update: [Function: newMethod],
        patch: [Function: newMethod],
        remove: [Function: newMethod],
        methods: [Object],
        hooks: [Function: hooks],
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        prependListener: [Function: prependListener],
        once: [Function: once],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        off: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        rawListeners: [Function: rawListeners],
        listenerCount: [Function: listenerCount],
        eventNames: [Function: eventNames],
        publish: [Function: publish],
        _super: undefined,
        [Symbol(@feathersjs / transport - commons / publishers)]: {}
      }
    },
    providers: [
      [Function]
    ],
    _setup: false,
    hookTypes: ['before', 'after', 'error', 'finally'],
    hooks: [Function: hooks],
    eventMappings: {
      create: 'created',
      update: 'updated',
      remove: 'removed',
      patch: 'patched'
    },
    _super: undefined,
    _router: {
      [Function: router]
      params: {},
      _params: [],
      caseSensitive: false,
      mergeParams: undefined,
      strict: false,
      stack: [
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer]
      ]
    },
    rest: {
      find: [Function],
      get: [Function],
      create: [Function],
      update: [Function],
      patch: [Function],
      remove: [Function]
    },
    channel: [Function: channel],
    publish: [Function: publish],
    lookup: [Function: lookup],
    passport:
    Authenticator {
      _key: 'passport',
      _strategies: {
        session: [SessionStrategy],
        jwt: [JwtStrategy],
        local: [Strategy]
      },
      _serializers: [],
      _deserializers: [],
      _infoTransformers: [],
      _framework: { initialize: [Function], authenticate: [Function] },
      _userProperty: 'user',
      _sm: SessionManager { _key: 'passport', _serializeUser: [Function: bound] },
      Authenticator: [Function: Authenticator],
      Passport: [Function: Authenticator],
      Strategy: {
        [Function: Strategy] Strategy: [Circular] },
      strategies: { SessionStrategy: [Function: SessionStrategy] },
      _feathers: { jwt: [Object], local: [Object] },
      createJWT: [Function: createJWT],
      verifyJWT: [Function: verifyJWT],
      options: [Function]
    },
    authenticate: [Function: bound],
    io:
    Server {
      nsps: { '/': [Namespace] },
      parentNsps: Map {},
      _path: '/socket.io',
      _serveClient: true,
      parser: {
        protocol: 4,
        types: [Array],
        CONNECT: 0,
        DISCONNECT: 1,
        EVENT: 2,
        ACK: 3,
        ERROR: 4,
        BINARY_EVENT: 5,
        BINARY_ACK: 6,
        Encoder: [Function: Encoder],
        Decoder: [Function: Decoder]
      },
      encoder: Encoder {},
      _adapter: [Function: Adapter],
      _origins: '*:*',
      sockets: Namespace {
        name: '/',
        server: [Circular],
        sockets: {},
        connected: {},
        fns: [Array],
        ids: 0,
        rooms: [],
        flags: {},
        adapter: [Adapter],
        _maxListeners: 64,
        _events: [Object],
        _eventsCount: 1
      },
      eio: Server {
        clients: {},
        clientsCount: 0,
        wsEngine: 'ws',
        pingTimeout: 5000,
        pingInterval: 25000,
        upgradeTimeout: 10000,
        maxHttpBufferSize: 100000000,
        transports: [Array],
        allowUpgrades: true,
        allowRequest: [Function: bound],
        cookie: 'io',
        cookiePath: '/',
        cookieHttpOnly: true,
        perMessageDeflate: [Object],
        httpCompression: [Object],
        ws: [WebSocketServer],
        _events: [Object],
        _eventsCount: 1
      },
      httpServer: Server {
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6::::4041',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(asyncId)]: 17
      },
      engine: Server {
        clients: {},
        clientsCount: 0,
        wsEngine: 'ws',
        pingTimeout: 5000,
        pingInterval: 25000,
        upgradeTimeout: 10000,
        maxHttpBufferSize: 100000000,
        transports: [Array],
        allowUpgrades: true,
        allowRequest: [Function: bound],
        cookie: 'io',
        cookiePath: '/',
        cookieHttpOnly: true,
        perMessageDeflate: [Object],
        httpCompression: [Object],
        ws: [WebSocketServer],
        _events: [Object],
        _eventsCount: 1
      }
    },
    _isSetup: true,
    [Symbol(@feathersjs / transport - commons / channels)]: {},
    [Symbol(@feathersjs / transport - commons / publishers)]: {
      [Symbol(@feathersjs / transport - commons / all - events)]: [Function] },
    [Symbol(@feathersjs / transport - commons / router)]: {
      _rootNode: Node {
        type: 0,
        paramName: null,
        parent: null,
        children: [Object],
        data: null,
        wildcardChildNode: null,
        placeholderChildNode: null
      },
      _strictMode: undefined,
      _staticRoutesMap: {
        authentication: [Node],
        users: [Node],
        hello: [Node],
        barang: [Node],
        customer: [Node],
        'transaksi-jual': [Node],
        'transaksi-beli': [Node]
      }
    }
}
